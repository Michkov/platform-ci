#!/usr/bin/python

# Copyright 2016 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import logging
import os
import subprocess
from platform_ci.distgit import DistGitCommit
from platform_ci.ci_types import CommitCI, PlatformCISource
from platform_ci.jenkins import PlatformJenkins
from platform_ci.brew import BrewBuildAttempts, BuildToCommitterMapping
import platform_ci.notifications as notifications


def enable(args):
    """Enable Build-on-Push CI for a component.

    Create a job, called a *dispatcher*, that is triggered on all new commits
    in the repository for the component.

    Args:
        args: An argparse namespace as passed to the program.

        args.component: Component name
        args.templates: A path to a directory with JJB templates
        args.slave: A slave name where the jobs should be run
        args.platform_ci_repo: A GitHub account namespace of the Platform CI
            repo from which the created jobs will fetch support code.
        args.platform_ci_branch: A branch name of the Platform CI repo
            from which the created jobs will fetch support code.
    """
    logging.info("Enabling Commit CI for component:  %s", args.component)

    jenkins_url = os.environ["JENKINS_URL"]

    commit_ci = CommitCI(PlatformJenkins.get_jenkins(jenkins_url, args.templates), args.component)
    platform_ci_source = PlatformCISource(args.platform_ci_repo, args.platform_ci_branch)
    commit_ci.enable(args.slave, platform_ci_source)


def disable(args):
    """Disable Build-on-Push CI for a component.

    Disable a dispatcher job for a component if it exists. Do nothing
    if the dispatcher job does not exist.

    Args:
        args: An argparse namespace as passed to the program.

        args.component: Component name
    """
    logging.info("Disabling Commit CI for component: %s", args.component)

    jenkins_url = os.environ["JENKINS_URL"]

    commit_ci = CommitCI(PlatformJenkins.get_jenkins(jenkins_url), args.component)
    commit_ci.disable()


def run(args):
    """Decide if a branch with new commits should be built, if yes, trigger a job.

    This method implements a procedure done by the dispatcher job.

    Decide if the branch should be build. If yes, trigger the *worker* job if
    it exists. If it does not, create the worker job first, then trigger it.

    Args:
        args: An argparse namespace as passed to the program.

        args.component: Component name
        args.branch: A name of a component repository branch with new commits
        args.templates: A path to a directory with JJB templates
        args.slave: A slave name where the jobs should be run
        args.platform_ci_branch: A branch name of the Platform CI repo
            from which the created builds will fetch support code.
        args.platform_ci_repo: A GitHub user whose Platform CI fort
            will be used to getch the support code.
        args.config: A name of a file that is searched in a branch. If such file
            is present in a branch, the branch will be built as if it were
            a staging branch.
    """

    logging.info("Building scratch build on branch [%s] of component [%s]", args.branch, args.component)
    jenkins_url = os.environ["JENKINS_URL"]

    config_file_path = os.path.join(args.component, args.config)

    if os.path.isfile(config_file_path):
        config_file = config_file_path
    else:
        config_file = None

    platform_ci_source = PlatformCISource(args.platform_ci_repo, args.platform_ci_branch)
    commit = DistGitCommit(args.commit_hash, args.branch, args.commit_description)

    commit_ci = CommitCI(PlatformJenkins.get_jenkins(jenkins_url, args.templates), args.component)
    commit_ci.consider_build(commit, args.slave, platform_ci_source, config_file)


def get_author():
    command = ["git", "--no-pager", "show", "-s", "--format=%ce", "HEAD"]

    git_commiter_query = subprocess.Popen(command, stdout=subprocess.PIPE)
    git_commiter_query.wait()
    if git_commiter_query.returncode != 0:
        raise subprocess.CalledProcessError(git_commiter_query.returncode, command)

    author = git_commiter_query.communicate()[0].strip()
    return author


def build(args):
    """Issue a scratch build request on a given branch.

    This method implements the sequence done by *worker* job.

    Check out the branch, then issue a Brew scratch build from the code present
    in the branch.

    Args:
        args: An argparse namespace as passed to the program.

        args.component: Component name
        args.branch: A name of a component repository branch with new commits
        args.addresses: A file to which the email addresses related
            to the issued build will be written for later matching
        args.targets: A list of Brew targets for which builds will be attempted.
        args.report: A path to a file where the notification message body will
            be written.
        args.values: An file-like object opened for writing, where KEY=VALUE
            records will be written.
    """
    logging.info("Checking out branch %s of git repository %s", args.branch, args.component)

    cwd = os.getcwd()
    os.chdir(args.component)

    subprocess.check_call(["git", "branch", "--set-upstream", args.branch, "origin/{0}".format(args.branch)])

    author = get_author()
    args.values.write("NOTIFICATION_RECIPIENTS={0}".format(author))

    builds = BrewBuildAttempts(args.targets, cwd)
    builds.execute()
    builds.wait()

    os.chdir(cwd)
    if args.report:
        logging.info("Creating an email notification file")
        notification = notifications.BrewBuildsNotification(builds, args.component, args.branch)
        with open(args.report, "w") as report:
            report.write(str(notification))

    if builds.all_successful():
        for brew_build in builds.all():
            mapping = BuildToCommitterMapping(brew_build.task_id, author)
            mapping.save()
        sys.exit(0)
    else:
        sys.exit(1)


def create_error_email_notification(args, error_header, error_message):
    """Create a error notification email body.

    Create a notification message and write it into a file. The notification
    message is customized with a header (that usually describes a class of
    possible errors to the user) and an error message (the specific failure
    that happened in this case.

    Args:
        args: An argparse namespace as passed to the program.
        error_header: A paragraph explaining this class of errors to the user
        error_message: A specific message about that exactly happened.

        args.report: A path to a (writable) file where the message will be written
        args.component: Component name
        args.branch: A name of a component repository branch with new commits
        args.targets: A list of Brew targets for which builds were attempted
    """
    if args.report:
        notification = notifications.BrewBuildsErrorNotification(error_header, error_message, args.component,
                                                                 args.branch, args.targets)
        with open(args.report, "w") as report:
            report.write(str(notification))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--report", default=None)

    subparsers = parser.add_subparsers()

    parser_enable = subparsers.add_parser("enable")
    parser_enable.add_argument("component")
    parser_enable.add_argument("templates", metavar="DIRECTORY")
    parser_enable.add_argument("slave", metavar="SLAVE")
    parser_enable.add_argument("platform_ci_repo", metavar="ACCOUNT", default="RHQE")
    parser_enable.add_argument("platform_ci_branch", metavar="BRANCH", default="master")
    parser_enable.set_defaults(func=enable)

    parser_disable = subparsers.add_parser("disable")
    parser_disable.add_argument("component")
    parser_disable.set_defaults(func=disable)

    parser_run = subparsers.add_parser("run")
    parser_run.add_argument("component")
    parser_run.add_argument("branch")
    parser_run.add_argument("templates")
    parser_run.add_argument("slave", metavar="SLAVE")
    parser_run.add_argument("platform_ci_repo", metavar="GITHUB_USER", default="RHQE")
    parser_run.add_argument("platform_ci_branch", metavar="BRANCH", default="master")
    parser_run.add_argument("--config", dest="config", metavar="FILE", default="ci.yaml")
    parser_run.add_argument("--commit-hash", dest="commit_hash", default=None)
    parser_run.add_argument("--commit-description", dest="commit_description", default=None)
    parser_run.set_defaults(func=run)

    parser_build = subparsers.add_parser("build")
    parser_build.add_argument("component")
    parser_build.add_argument("branch")
    parser_build.add_argument("targets", nargs="+")
    parser_build.add_argument("--values-file", dest="values", metavar="FILE", type=argparse.FileType('w'),
                              default="/dev/null")
    parser_build.set_defaults(func=build)

    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)

    args = parser.parse_args()
    cwd = os.getcwd()

    try:
        args.func(args)
    except notifications.BaseCIException as exc:
        os.chdir(cwd)
        create_error_email_notification(args, exc.header, str(exc))
        raise
    except Exception as exc:
        os.chdir(cwd)
        create_error_email_notification(args, str(exc), notifications.create_platform_error_header())
        raise


if __name__ == "__main__":
    main()
