# Copyright 2016 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import glob


def configure(ctx):
    ctx.find_program("shellcheck")
    ctx.env.env = dict(os.environ)
    ctx.env.env['PYTHONPATH'] = os.pathsep.join(sys.path + [os.path.join(ctx.srcnode.abspath(), "platform_ci")])


def pylint_file(ctx, python_file):
    ctx(rule="pylint --rcfile=%s/.pylint ${SRC} && touch ${TGT}" % ctx.srcnode.abspath(), source=python_file,
        target="scripts/%s.pylint" % python_file)


def pep8_file(ctx, python_file):
    ctx(rule="pep8 --ignore=E501 ${SRC} && touch ${TGT}", source=python_file, target="scripts/%s.pep8" % (python_file))


def python_static_analysis(ctx):
    python_files = glob.glob(os.path.join(ctx.path.abspath(), "*.py"))
    python_files.append(os.path.join(ctx.path.abspath(), "wscript"))
    pyfiles = ("ci_commit",)
    python_files.extend([os.path.join(ctx.path.abspath(), pyfile) for pyfile in pyfiles])

    for python_file in python_files:
        pylint_file(ctx, os.path.basename(python_file))
        pep8_file(ctx, os.path.basename(python_file))


def shellcheck_file(ctx, shell_file):
    excludes = {"job-platform-component-setup.sh": "SC2086,SC2089,SC2090"}
    excludes = {"job-commit-worker.sh": "SC2086"}
    exclude = ""
    if shell_file in excludes:
        exclude = "--exclude=%s" % (excludes[shell_file])

    ctx(rule="shellcheck %s ${SRC} && touch ${TGT}" % exclude, source=shell_file,
        target="scripts/%s.shellcheck" % shell_file)


def shell_static_analysis(ctx):
    shell_files = ["functions", "job-platform-component-setup.sh", "job-commit-dispatcher.sh", "job-commit-worker.sh"]
    shell_file_paths = [os.path.join(ctx.path.abspath(), shell_file) for shell_file in shell_files]

    for shell_file in shell_file_paths:
        shellcheck_file(ctx, os.path.basename(shell_file))


def build(ctx):
    python_static_analysis(ctx)
    shell_static_analysis(ctx)
